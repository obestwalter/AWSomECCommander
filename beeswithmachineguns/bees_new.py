"""based on beeswithmachineguns

* separated configuration and core functionality

* output is logged instead of printed

* class based approach
  (two reasons:
    * ease testing
    * functionality easily adjustable by by overwriting methods

"""
import simplejson as json
import logging
from plumbum.path import LocalPath, RemotePath, LocalWorkdir

from beeswithmachineguns.bees import *


log = logging.getLogger(__name__)


class ProjectConfig(object):
    FILENAME_CONFIG = 'hive.json'
    """general configuration"""

    def __init__(self):
        self.workPath = LocalWorkdir()
        self.currentConfigPath = self.workPath / self.FILENAME_CONFIG
        """:type: LocalPath"""


class CurrentHive(object):
    FILENAME_CURRENT_HIVE = 'current.json'
    """configuration of an active bee hive (autogenerated)"""

    def __init__(self):
        self._hiveIsInitialized = False
        self.workPath = LocalWorkdir()
        self.currentHivePath = self.workPath / self.FILENAME_CURRENT_HIVE
        """:type: LocalPath"""
        self.username = None
        self.keyName = None
        self.zone = None
        self.beesIds = None

    @property
    def config(self):
        if not self._hiveIsInitialized:
            self.initialize_hive()

        return [self.username, self.keyName, self.zone, self.beesIds]

    @property
    def hiveIsActive(self):
        return self.currentHivePath.exists()

    def initialize_hive(self):
        config = json.loads(self.currentHivePath.read())
        for key, value in config.items():
            log.debug("read from config: %s <- %s", key, value)
            setattr(self, key, value)
        self._hiveIsInitialized = True
        log.info("hive initialized - "
                 "username=%s, keyName%s, zone=%s, beesIds=%s",
                 self.username, self.keyName, self.zone, self.beesIds)

    def save_current_hive_config(self):
            self.currentHivePath.write('\n'.join(self.config))

    def delete_current_hive_config(self):
            self.currentHivePath.delete()


class Beekeeper(object):
    def __init__(self):
        pass


class LoggingConfig(object):
    FILENAME_LOG = 'bee.log'

    def __init__(self):
        self.workPath = LocalWorkdir()
        self.localLogPath = None
        """:type: LocalPath"""

    def init_logging(self, logLevel=logging.INFO, logToFile=True):
        log.setLevel(logLevel)
        self.localLogPath = self.workPath / self.FILENAME_LOG
        fmt = '%(asctime)s %(name)s %(levelname)s: %(message)s'
        logging.basicConfig(format=fmt)
        if logToFile:
            fh = logging.FileHandler(filename=str(self.localLogPath))
            fh.setFormatter(logging.Formatter(fmt))
            log.addHandler(fh)
        log.name = 'bees' if log.name == '__main__' else log.name
        log.debug("working in %s", self.workPath)


def main(workingPath=None):
    workPath = LocalWorkdir()
    if workingPath:
        workPath.chdir(workingPath)
    logCnf = LoggingConfig()
    logCnf.init_logging(logLevel=logging.DEBUG)
    cnf = CurrentHive()
    print cnf.config
    print cnf.hiveIsActive


if __name__ == '__main__':
    main('../tests/fake_project_dir')

    # time.sleep(0.01)
    # for k, v in cnf.__dict__.items():
    #     print k, v
    # print cnf.beesIds
