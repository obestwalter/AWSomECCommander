"""based on beeswithmachineguns

* separated configuration and core functionality

* output is logged instead of printed

* class based approach
  (two reasons:
    * ease testing
    * functionality easily adjustable by by overwriting methods

"""
import logging
from logging.handlers import SysLogHandler
import traceback

from beeswithmachineguns.bees import *


log = logging.getLogger(__name__)


class LocalPath(str):
    """Minimal pathlib to make path handling nicer.

    Todo use real pathlib, when migrated to Python3
    """

    def __init__(self, path):
        super(LocalPath, self).__init__(path)
        self.path = path

    def __str__(self):
        return self.path

    def __repr__(self):
        return self.__str__()

    def __div__(self, other):
        return LocalPath(os.path.join(self.path, other))

    @property
    def exists(self):
        return os.path.exists(self.path)


class Configurator(object):
    FILENAME_CONFIG = 'hive.conf'
    """general configuration"""
    FILENAME_CURRENT_HIVE = 'current.conf'
    """configuration of an active bee hive (autogenerated)"""
    FILENAME_LOG = 'bee.log'

    def __init__(self, workingPath=None):
        self.workPath = LocalPath(workingPath or os.getcwd())
        self.currentConfigPath = self.workPath / self.FILENAME_CONFIG
        self.currentHivePath = self.workPath / self.FILENAME_CURRENT_HIVE
        self.localLogPath = None
        self.username = None
        self.keyName = None
        self.zone = None

    @property
    def currentHiveConfig(self):
        return [self.username, self.keyName, self.zone, self.beesIds]

    @property
    def hasActiveHive(self):
        return self.currentHivePath.exists

    def init_logging(self, logLevel=logging.INFO):
        log.setLevel(logLevel)
        self.localLogPath = self.workPath / self.FILENAME_LOG
        fmt = 'bees %(levelname)s: %(message)s'
        logging.basicConfig(format=fmt)
        log.addHandler(logging.FileHandler(filename=self.localLogPath))

    def get_current_hive(self):
        try:
            with open(self.currentHivePath) as f:
                lines = [l.strip() for l in f.readlines()]
            self.username, self.keyName, self.zone, self.beesIds = lines
            log.debug("username=%s, keyName%s, zone=%s, bees=%s",
                      self.username, self.keyName, self.zone, self.beesIds)
        except IOError as e:
            if e.errno != 2:
                log.error("error %s getting hive from %s: %s",
                          e.filename, e.errno, e.message, exc_info=True)

    def save_current_hive(self):
        with open(self.currentHivePath, 'w') as f:
            f.write('\n'.join(self.currentHiveConfig))

    @property
    def beesIds(self):
        return getattr(self, '_beesIds', [])

    @beesIds.setter
    def beesIds(self, value):
        self._beesIds = value.split()


class Beekeeper(object):
    def __init__(self):
        pass


if __name__ == '__main__':
    path = '../tests/fake_project_dir'
    cnf = Configurator(path)
    cnf.init_logging(logLevel=logging.DEBUG)
    cnf.get_current_hive()

    time.sleep(0.01)
    for k, v in cnf.__dict__.items():
        print k, v
    print cnf.beesIds
